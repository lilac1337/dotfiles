#+TITLE: patchouli(emacs) config
* emacs tweaks
** coding improvements
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; line numbers
  (setq line-number-mode t)
  (global-display-line-numbers-mode 1)

  ;; line numbers relative to current cursor position
  (setq display-line-numbers-type 'relative)
  (setq column-number-mode t)
  (setq-default
   c-default-style "k&r"
   c-basic-offset 4)

  ;; 4-space indents
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq-default electric-indent-inhibit t)
  (setq indent-line-function 'insert-tab)

  ;; automatically complete brackets/quotes
  (setq electric-pair-pairs '(
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\{ . ?\})
                              (?\" . ?\")
                              (?\' . ?\')
                              ))
#+END_SRC
** disable junk
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq inhibit-splash-screen t)
  (setq initial-scratch-message nil)
  (setq inhibit-startup-message t)
  (setq ring-bell-function 'ignore)
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
  (electric-pair-mode t)
  (when window-system
    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (global-prettify-symbols-mode t))
#+END_SRC
** disable buffers i don't use
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; from stackexchange user "Ole"
  ;; Makes *scratch* empty.
  (setq initial-scratch-message "")

  ;; Removes *scratch* from buffer after the mode has been set.
  (defun remove-scratch-buffer ()
    (if (get-buffer "*scratch*")
        (kill-buffer "*scratch*")))
  (add-hook 'after-change-major-mode-hook 'remove-scratch-buffer)

  ;; Removes *messages* from the buffer.
  (setq-default message-log-max nil)
  (kill-buffer "*Messages*")

  ;; Removes *Completions* from buffer after you've opened a file.
  (add-hook 'minibuffer-exit-hook
            '(lambda ()
               (let ((buffer "*Completions*"))
                 (and (get-buffer buffer)
                      (kill-buffer buffer)))))

  ;; Don't show *Buffer list* when opening multiple files at the same time.
  (setq inhibit-startup-buffer-menu t)
#+END_SRC

** editing improvements
non-coding related editing enhancements
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; highlight current line
  (global-hl-line-mode t)

  ;; interactively do things in minibuffers
  (ido-mode t)
#+END_SRC
** org mode
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; open org files with everything collapsed
  (setq org-startup-folded t)
#+END_SRC
** terminal
#+BEGIN_SRC emacs-lisp :tangle yes
  (defvar my-term-shell "/bin/zsh")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC
** themeing
actual themeing is done through the ewal package below
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; larger modeline
  (set-face-attribute 'mode-line nil  :height 175)

  ;; custom font
  (custom-set-faces
   '(default ((t (:inherit nil :extend nil :stipple nil :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 137 :width normal :foundry "outline" :family "azukifontB")))))

  ;; modeline stuff
  (size-indication-mode)
  (display-time-mode)
#+END_SRC
* packages
** aggressive indent
keeps code properly indented
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package aggressive-indent
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'aggressive-indent-mode))
#+END_SRC
** beacon
find cursor after moving
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+END_SRC
** company-mode
little autocomplete box
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company
    :ensure t
    :init
    (setq company-minimum-prefix-length 1
          company-idle-delay 0.0)
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC
** dashboard
add a nice dashboard
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10)))
    (setq dashboard-banner-logo-title "hai :3")
    (setq dashboard-center-content t)
    (setq dashboard-startup-banner "~/.emacs.d/patchouli.png"))
#+END_SRC
** dimmer
dim inactive windows
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package dimmer
    :ensure t
    :config
    (progn
      (setq dimmer-fraction 0.75)
      (setq dimmer-adjustment-mode :foreground)
      (dimmer-configure-which-key))
    :init
    (dimmer-mode t))
#+END_SRC
** elcord
set our discord status
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package elcord
    :ensure t
    :init
    (elcord-mode 1))
#+END_SRC
** ewal
generate color scheme automatically from pywal
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ewal
    :ensure t
    :init (setq ewal-use-built-in-always-p nil
                ewal-use-built-in-on-failure-p t
                ewal-json-file "~/.cache/wal/colors.json"
                ewal-built-in-palette "sexy-material"))

  (use-package ewal-spacemacs-themes
    :ensure t
    :init (progn
            (show-paren-mode +1)
            (global-hl-line-mode))
    :config (progn
              (load-theme 'ewal-spacemacs-modern t)
              (enable-theme 'ewal-spacemacs-modern)))
#+END_SRC
** extra languages
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package protobuf-mode
    :ensure t
    :init)

  (use-package sourcepawn-mode
    :ensure t
    :init)

  (use-package typescript-mode
    :ensure t
    :init)
#+END_SRC
** flycheck
on the *fly* error checking
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package flycheck
    :ensure t
    :init
    (add-hook 'after-init-hook #'global-flycheck-mode))
#+END_SRC
** goto-line preview
show the line while entering it
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package goto-line-preview
    :ensure t
    :init)

  (global-set-key [remap goto-line] 'goto-line-preview)
#+END_SRC
** lsp-mode
language server protocol
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package lsp-mode
    :ensure t
    :init
    (setq lsp-keymap-prefix "C-c l"
          lsp-idle-delay 0.1)
    :hook ((c++-mode . clangd)
           (python-mode . lsp)
           (c-mode . clangd)
           (csharp-mode . omnisharp))
    :commands lsp)

  (use-package lsp-ui
    :ensure t
    :init
    (lsp-ui-mode t))
#+END_SRC
** pc-bufsw
switch buffers with ctrl+tab
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package pc-bufsw
    :ensure t
    :config
    (pc-bufsw t))
#+END_SRC
** rainbow-delimiters
highlight delimiters
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode 1))
#+END_SRC
** treemacs
show a nice little file view with M-x treemacs
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package treemacs
    :ensure t)

  (use-package lsp-treemacs
    :ensure t)
#+END_SRC
** which-key
show key bindings
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC
